var tipuesearch = {"pages": [{'title': '簡介', 'text': '學習如何一次上傳多個圖檔, 並且學會如何引用, 並且設定圖片大小 \n \n', 'tags': '', 'url': '簡介.html'}, {'title': '骰子遊戲', 'text': "\xa0 \n \n  Your browser doesn't support the HTML5 element canvas.      Throw dice  \n Stage:   Point:   Outcome: ", 'tags': '', 'url': '骰子遊戲.html'}, {'title': '猜數字', 'text': 'Try it', 'tags': '', 'url': '猜數字.html'}, {'title': 'WEEK1', 'text': '\n 學習如何一次上傳多個圖檔, 並且學會如何引用, 並且設定圖片大小. \n \n', 'tags': '', 'url': 'WEEK1.html'}, {'title': 'WEEK2', 'text': '網路與電腦程式只是工具, 任何人希望與遠端的系統或成員溝通, 可以使用網路. \n 任何人想要利用電腦的能力解決問題, 就必須學會編寫電腦程式, 與電腦溝通. \n', 'tags': '', 'url': 'WEEK2.html'}, {'title': 'WEEK3', 'text': '根據\xa0 https://2019wcm.blogspot.com/2019/03/ungit.html \xa0的設定, 完成 ungit 配置. \n', 'tags': '', 'url': 'WEEK3.html'}, {'title': '網際簡報', 'text': 'CMSimfly 中採用 \xa0 Reveal.js \xa0 作為網際簡報, 其中的維護檔案位於 config/reveal.js, 而對應的簡報檔案則位於 reveal 目錄中. \n', 'tags': '', 'url': '網際簡報.html'}, {'title': '網誌編輯', 'text': 'CMSimfly 採用 \xa0 Pelican blog \xa0 系統, 編輯檔案位於 config/pelican.leo, 對應的 \n \xa0Markdown 原始檔案位於 markdown 目錄中, 而經 Pelican 轉換出的網誌超文件檔案則位於 blog 目錄中. \n 其餘在網誌文章中所需要的 Javascript 或 Brython 程式檔案, 則與 CMSimfly 及 Reveal.js 共用, 位於 static 目錄下. \n 上傳檔案與圖檔的引用則與 CMSimfly 架構相同. \n 第二位搶這裡也是不遺餘力 \n \n 就是這樣編輯的 \n 接下來修改這裡', 'tags': '', 'url': '網誌編輯.html'}, {'title': 'git http 與 ssh', 'text': '利用 ssh 對 git 改版, 必須使用\xa0 home/.ssh/config 設定, 才能透過 proxy 伺服器進行連線, 由於在 IPv6 環境下, 必須要透過 proxy 才能對 Git 連線, 因此若無 config, 無法對遠端改版 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n \n \n \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H 140.130.17.53:3128 %h %p \n \xa0 \n Host github.com \n User git \n Port 22 \n Hostname github.com \n \xa0 \n IdentityFile  "y:\\home\\.ssh\\id_rsa" \n \xa0 \n TCPKeepAlive yes \n IdentitiesOnly yes \n \xa0 \n Host ssh.github.com \n User git \n Port 443 \n Hostname ssh.github.com \n \xa0 \n IdentityFile  "y:\\home\\.ssh\\id_rsa" \n \xa0 \n TCPKeepAlive yes \n IdentitiesOnly yes \n \n \n \n \n \n', 'tags': '', 'url': 'git http 與 ssh.html'}, {'title': '近端配置與管理', 'text': '1.點擊右上角的三點線並進入設定(settings) \n \n 2.滾到最下面點開(Advanced) \n \n 3.找到Syetm點開Open proxy settings \n \n 4.點開LAN設定 \n \n 5.輸入你要的網路位址就能連上網路了 \n 可以使用140.130.17.3 \n \n \n \n', 'tags': '', 'url': '近端配置與管理.html'}, {'title': '期中報告', 'text': '\n', 'tags': '', 'url': '期中報告.html'}, {'title': '網路連線設定', 'text': '了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲. \n', 'tags': '', 'url': '網路連線設定.html'}, {'title': '配置可攜程式環境', 'text': '取得 Windows 10 64 位元環境下的可攜程式環境 (下載\xa0 2019_cdb_w5.7z), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 \n', 'tags': '', 'url': '配置可攜程式環境.html'}, {'title': '倉儲改版', 'text': '建立Git倉儲，並克隆倉儲至近端工作後，對遠端倉儲改版 可攜程式系統中已經內建git，可以在啟動start.bat後，透過路徑的設定，直接執行git指令。 建立Git倉儲，共分為兩類，一類是直接在Github網際介面下建立倉儲時，要求建立README.md檔案，之後可以直接在近端，以git clone加上倉儲連線URL，將倉儲克隆一份到近端，並以最新版本作為工作目錄，使用者改版後，可以直接透過git add，commit與push對遠端倉儲改版。 另一類則是故意在Github網際介面下建立倉儲時，不要建立任何檔案，而是在近端自行利用git指令建立倉儲架構，新增內容後，以git remote add設法在近端倉儲中納入起源URL後，將近端倉儲版本新增提交推送到遠端。 git add \n \n git add可以用來新增一個檔案，數個檔案，或在之前提交後所新增的所有內容。 git add在GIT架構下，是對所新增或修改的內容拍快照： git add。 將當前目錄和所有子目錄中的所有已修改和新（未跟踪）文件添加到暫存區域（也稱為索引），從而使它們準備好包含在下一個git提交中。 git add \xa0 git commit \xa0 將忽略與.gitignore文件中的模式匹配的任何文件 \xa0 \n \n git commit執行之前，必須使用git config建立臨時或永久的身分註記，因為GIT在展開所有改版內容時，必須明確登錄這些變更的作者與時間。 當使用者採用git commit -m“改版說明訊息”，此次提交到.git目錄下的更動內容，均會綁定使用者身分與改版所輸入的說明訊息。 git push \xa0 \n \n git push在隨後沒有輸入遠端URL代號時，表示要推送到origin，若透過git remote add設定其他代號與URL對應時，git push加上代號，就可以將此次的提交內容，推送到指定的URL所在遠端倉儲。 \n 靜態CMSimfly \n 利用CMSimfly（https://github.com/chiamingyen/cmsimfly）內容，建立自己的Github Pages網站 \n 設法利用 HTML5 CSS與Javascript ，納入與機械設計相關的靜態網頁內容 \xa0', 'tags': '', 'url': '倉儲改版.html'}, {'title': '校園授權軟體', 'text': '學校電算中心網站-下載專區 \n 網址: https://nfucc.nfu.edu.tw/zh/download \xa0 \n 登入學生帳戶後即可到此網頁，可點選自己想要安裝的軟體 \n 但是 下載軟體限定校園IP \n \n', 'tags': '', 'url': '校園授權軟體.html'}, {'title': 'WEEK15', 'text': '\n 利用 Virtualbox 建立虛擬 Ubuntu 18.04 網際內容管理系統伺服主機: \n 1. 安裝最新版的 Virtualbox \n 2. 建立 Ubuntu 18.04 虛擬主機 \n 3. 以網路卡橋接啟動 Ubuntu 伺服器 \n 4. 以 sudo apt install nginx 安裝 nginx WWW 伺服器 \n 5. 以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線 \n 6. 以 Windows 10 下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu \n 7. 利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx \n 8. 在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi \n 9. 在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu. \n 10. 將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後. \n 11. 在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動. \n 12. 完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動 \n 先創建一個名字 \n \n 再拉到4096MB的大小 \n \n 選擇中間並按create \n \n 將10GB改為500GB再按Creat \n \n 選取第三個 \n \n 創建好後按啟動，選擇已下載好的檔案並創建 \n \n 打ifconfig查詢IP位置 \n \n 再將編輯好的 nginx 設定檔案送到 Ubuntu \n', 'tags': '', 'url': 'WEEK15.html'}, {'title': 'ROC Flag', 'text': "\n  啟動 Brython  \n \n \n \n \n \n W14 <<  Previous \n  footer  \n \n \n  Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0.   Copyright ©\n \nAll rights reserved | This template is made with   by  Colorlib    Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0.  \n \n \n  for footer  \n", 'tags': '', 'url': 'ROC Flag.html'}, {'title': '期末報告影片', 'text': '\n  for site wrap  \n \n  <script src="./../static/chimper/js/jquery-3.3.1.min.js"></script>  \n \n \n \n \n \n \n \n \n \n \n \n            <script src="./../static/chimper/js/typed.js"></script>\n                    <script>\n                    var typed = new Typed(\'.typed-words\', {\n                    strings: ["Web Apps"," WordPress"," Mobile Apps"],\n                    typeSpeed: 80,\n                    backSpeed: 80,\n                    backDelay: 4000,\n                    startDelay: 1000,\n                    loop: true,\n                    showCursor: true\n                    });\n                    </script>\n             \n \n', 'tags': '', 'url': '期末報告影片.html'}]};